{"version":3,"file":"VideoEffectsSdkReactNativeModule.js","sourceRoot":"","sources":["../src/VideoEffectsSdkReactNativeModule.ts"],"names":[],"mappings":"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","sourcesContent":["import { NativeModules, Platform } from \"react-native\";\nimport { requireNativeModule } from \"expo-modules-core\";\n\nimport {\n  InitializationResult,\n  TsvbVideoEffectsConfig,\n  VideoEffectsSdkReactNativeModule,\n} from \"./VideoEffectsSdkReactNativeModule.types\";\n\nconst VideoEffectsSdkReactNativeModule = (\n  Platform.OS === \"android\"\n    ? {}\n    : requireNativeModule(\"VideoEffectsSdkReactNativeModule\")\n) as VideoEffectsSdkReactNativeModule;\n\nconst { WebRTCModule } = NativeModules;\n\nclass TsvbVideoEffects {\n  private config: TsvbVideoEffectsConfig | null = null;\n  private initializationPromise: Promise<InitializationResult> | null = null;\n\n  async initialize(\n    config: TsvbVideoEffectsConfig\n  ): Promise<InitializationResult> {\n    this.config = config;\n\n    try {\n      if (Platform.OS === \"android\") {\n        const status =\n          await this.config?.mediaStreamTrack?.initializeEffectsSDK(\n            this.config.customerID\n          );\n        return { success: true, status };\n      }\n      this.initializationPromise = VideoEffectsSdkReactNativeModule.initialize(\n        config.customerID,\n        config.mediaStreamTrack.id\n      );\n      const result = await this.initializationPromise;\n\n      if (!result.success) {\n        throw new Error(result.error || \"Initialization failed\");\n      }\n\n      if (Platform.OS === \"ios\" && WebRTCModule) {\n        await WebRTCModule.mediaStreamTrackSetVideoEffects(\n          config.mediaStreamTrack.id,\n          [\"tsvb\"]\n        );\n      }\n\n      return result;\n    } catch (error) {\n      throw new Error(`Failed to initialize TSVB SDK: ${error}`);\n    }\n  }\n\n  async enableBlurBackground(power?: number) {\n    this.ensureInitialized();\n\n    try {\n      const blurPower = power ?? this.config?.defaultBlurPower ?? 0.3;\n\n      if (Platform.OS === \"android\") {\n        this.config?.mediaStreamTrack?.setEffectsSdkPipelineMode(\n          \"PipelineMode.blur\"\n        );\n      } else {\n        await VideoEffectsSdkReactNativeModule.enableBlurBackground(blurPower);\n      }\n    } catch (error) {\n      throw new Error(`Failed to enable blur: ${error}`);\n    }\n  }\n\n  async disableBlurBackground() {\n    this.ensureInitialized();\n\n    try {\n      if (Platform.OS === \"android\") {\n        this.config?.mediaStreamTrack?.setEffectsSdkPipelineMode(\n          \"PipelineMode.no_effect\"\n        );\n      } else {\n        await VideoEffectsSdkReactNativeModule.disableBlurBackground();\n      }\n    } catch (error) {\n      throw new Error(`Failed to disable blur: ${error}`);\n    }\n  }\n\n  async enableReplaceBackground(imagePath?: string | null) {\n    this.ensureInitialized();\n\n    try {\n      if (Platform.OS === \"android\") {\n        this.config?.mediaStreamTrack?.setEffectsSdkPipelineMode(\n          \"PipelineMode.replace\"\n        );\n      } else {\n        await VideoEffectsSdkReactNativeModule.enableReplaceBackground(\n          imagePath\n        );\n      }\n    } catch (error) {\n      throw new Error(`Failed to enable background replacement: ${error}`);\n    }\n  }\n\n  async disableReplaceBackground() {\n    this.ensureInitialized();\n\n    try {\n      if (Platform.OS === \"android\") {\n        this.config?.mediaStreamTrack?.setEffectsSdkPipelineMode(\n          \"PipelineMode.no_effect\"\n        );\n      } else {\n        await VideoEffectsSdkReactNativeModule.disableReplaceBackground();\n      }\n    } catch (error) {\n      throw new Error(`Failed to disable background replacement: ${error}`);\n    }\n  }\n\n  isBlurEnabled(): boolean {\n    if (Platform.OS === \"android\") {\n      // TODO: Add implementation for Android\n      return false;\n    }\n    return VideoEffectsSdkReactNativeModule.isBlurEnabled();\n  }\n\n  isVirtualBackgroundEnabled() {\n    if (Platform.OS === \"android\") {\n      // TODO: Add implementation for Android\n      return false;\n    }\n    return VideoEffectsSdkReactNativeModule.hasVirtualBackground();\n  }\n\n  isInitialized(): boolean {\n    if (Platform.OS === \"android\") {\n      return true;\n    }\n    return VideoEffectsSdkReactNativeModule.isInitialized();\n  }\n\n  cleanup(): void {\n    VideoEffectsSdkReactNativeModule.cleanup();\n    this.config = null;\n    this.initializationPromise = null;\n  }\n\n  getConfig(): TsvbVideoEffectsConfig | null {\n    return this.config;\n  }\n\n  private ensureInitialized(): void {\n    if (!this.isInitialized()) {\n      throw new Error(\"TSVB SDK is not initialized. Call initialize() first.\");\n    }\n  }\n}\n\nexport const tsvbVideoEffects = new TsvbVideoEffects();\n\nexport * from \"./VideoEffectsSdkReactNativeModule.types\";\nexport { TsvbVideoEffects };\nexport { VideoEffectsSdkReactNativeModule as VideoEffectsSdkReactNativeModule };\n"]}